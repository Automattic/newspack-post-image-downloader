<?php
/**
 * Class DownloaderTest.
 *
 * @package Newspack_Post_Image_Downloader
 */

namespace NewspackPostImageDownloaderTest;

use WP_UnitTestCase;
use NewspackPostImageDownloader\Downloader;
use RuntimeException;

/**
 * Sample test case.
 */
class DownloaderTest extends WP_UnitTestCase {

	/**
	 * Downloader object.
	 *
	 * @var Downloader
	 */
	private $downloader;

	/**
	 * Temp dir path.
	 *
	 * @var string $temp_dir Path to local tmp dir.
	 */
	private $temp_dir;

	/**
	 * Override setUp.
	 *
	 * @throws RuntimeException In case a temp dir could not have been created.
	 */
	public function setUp() {
		$this->downloader = new Downloader();

		// Create a temp dir to create the test files at.
		$this->temp_dir = sys_get_temp_dir() . '/tests_Newspack_Post_Image_Downloader';
		$mkdir_res      = file_exists( $this->temp_dir ) || mkdir( $this->temp_dir, 0777, true );
		if ( true !== $mkdir_res ) {
			throw new RuntimeException( sprintf( 'Class %s could not create temp directory %s.', __CLASS__, $this->temp_dir ) );
		}
	}

	/**
	 * Override tearDown.
	 */
	public function tearDown() {
		// Remove temp dir.
		@rmdir( $this->temp_dir );
	}

	/**
	 * Plain HTTP src. No other params.
	 */
	public function test_http_src_no_local_images_folder() {
		$src                           = 'http://host.com/path/img.jpg';
		$folder_local_images           = null;
		$default_image_host_and_schema = null;

		$img_import_path = $this->downloader->get_fully_qualified_img_import_or_download_path( $src, $folder_local_images, $default_image_host_and_schema );

		$this->assertSame( $src, $img_import_path );
	}

	/**
	 * Plain HTTP src. Path to folder with local images is provided, but the image file is not found there.
	 */
	public function test_http_src_no_local_file() {
		$src                           = 'http://host.com/path/img.jpg';
		$folder_local_images           = $this->temp_dir;
		$default_image_host_and_schema = null;

		$img_import_path = $this->downloader->get_fully_qualified_img_import_or_download_path( $src, $folder_local_images, $default_image_host_and_schema );

		$this->assertSame( $src, $img_import_path );
	}

	/**
	 * Plain HTTP src. Path to folder with local images is provided, and the image file is found locally.
	 */
	public function test_http_src_with_local_file() {
		$src                           = 'http://host.com/path/img.jpg';
		$folder_local_images           = $this->temp_dir;
		$default_image_host_and_schema = null;
		$local_file                    = $folder_local_images . '/path/img.jpg';
		$this->create_tmp_empty_local_file( $local_file );

		$img_import_path = $this->downloader->get_fully_qualified_img_import_or_download_path( $src, $folder_local_images, $default_image_host_and_schema );
		@unlink( $local_file );

		$this->assertSame( $local_file, $img_import_path );
	}

	/**
	 * Absolute reference src. But an exception gets thrown if the $default_image_host_and_schema param is not provided.
	 */
	public function test_absolute_ref_src_no_local_images_folder_throws_exception() {
		$this->expectException( RuntimeException::class );
		$this->expectExceptionCode( Downloader::EXCEPTION_CODE_NO_DEFAULT_HOST_PROVIDED );

		$src                           = '/path/img.jpg';
		$folder_local_images           = null;
		$default_image_host_and_schema = null;

		$img_import_path = $this->downloader->get_fully_qualified_img_import_or_download_path( $src, $folder_local_images, $default_image_host_and_schema );

		$this->assertSame( $src, $img_import_path );
	}

	/**
	 * Absolute reference src. All needed params are provided, but the image file is not found there.
	 */
	public function test_absolute_ref_src_no_local_file() {
		$src                           = '/path/img.jpg';
		$folder_local_images           = $this->temp_dir;
		$default_image_host_and_schema = 'https://deault/download/from';

		$img_import_path = $this->downloader->get_fully_qualified_img_import_or_download_path( $src, $folder_local_images, $default_image_host_and_schema );

		$this->assertSame( $default_image_host_and_schema . $src, $img_import_path );
	}

	/**
	 * Absolute reference src. The image file is found locally.
	 */
	public function test_absolute_ref_src_with_local_file() {
		$src                           = '/path/img.jpg';
		$folder_local_images           = $this->temp_dir;
		$default_image_host_and_schema = 'https://deault/download/from';
		$local_file                    = $folder_local_images . '/path/img.jpg';
		$this->create_tmp_empty_local_file( $local_file );

		$img_import_path = $this->downloader->get_fully_qualified_img_import_or_download_path( $src, $folder_local_images, $default_image_host_and_schema );
		@unlink( $local_file );

		$this->assertSame( $local_file, $img_import_path );
	}

	/**
	 * Relative reference src. But an exception gets thrown if the $default_image_host_and_schema param is not provided.
	 */
	public function test_relative_ref_src_no_local_images_folder_throws_exception() {
		$this->expectException( RuntimeException::class );
		$this->expectExceptionCode( Downloader::EXCEPTION_CODE_NO_DEFAULT_HOST_PROVIDED );

		$src                           = 'path/img.jpg';
		$folder_local_images           = null;
		$default_image_host_and_schema = null;

		$img_import_path = $this->downloader->get_fully_qualified_img_import_or_download_path( $src, $folder_local_images, $default_image_host_and_schema );

		$this->assertSame( $src, $img_import_path );
	}

	/**
	 * Relative reference src. All needed params are provided, but the image file is not found there.
	 */
	public function test_relative_ref_src_no_local_file() {
		$src                           = 'path/img.jpg';
		$folder_local_images           = $this->temp_dir;
		$default_image_host_and_schema = 'https://deault/download/from';

		$img_import_path = $this->downloader->get_fully_qualified_img_import_or_download_path( $src, $folder_local_images, $default_image_host_and_schema );

		$this->assertSame( $default_image_host_and_schema . '/' . $src, $img_import_path );
	}

	/**
	 * Relative reference src. The image file is found locally.
	 */
	public function test_relative_ref_src_with_local_file() {
		$src                           = 'path/img.jpg';
		$folder_local_images           = $this->temp_dir;
		$default_image_host_and_schema = 'https://deault/download/from';
		$local_file                    = $folder_local_images . '/path/img.jpg';
		$this->create_tmp_empty_local_file( $local_file );

		$img_import_path = $this->downloader->get_fully_qualified_img_import_or_download_path( $src, $folder_local_images, $default_image_host_and_schema );
		@unlink( $local_file );

		$this->assertSame( $local_file, $img_import_path );

	}

	/**
	 * Tests the `does_uri_match_host` function.
	 *
	 * @dataProvider providerUriHostMatching
	 *
	 * @param string $src             URI whose host we're testing.
	 * @param array  $hosts           Array of hosts to check for.
	 * @param bool   $result_expected Expected result.
	 */
	public function test_uri_host_matching( $src, $hosts, $result_expected ) {
		$result_actual = $this->downloader->does_uri_match_host( $src, $hosts );

		$this->assertSame( $result_expected, $result_expected );
	}

	/**
	 * DataProvider for test_uri_host_matching.
	 *
	 * @return array[]
	 */
	public function providerUriHostMatching() {
		 return array(
			 array(
				 'https://host1.com/path/img.jpg',
				 array( 'host1.com' ),
				 true,
			 ),
			 array(
				 'https://host1.com/path/img.jpg',
				 array( 'host2.com' ),
				 false,
			 ),
			 array(
				 'https://host1.com/path/img.jpg',
				 array( '*.host1.com' ),
				 false,
			 ),
			 array(
				 'https://host1.com/path/img.jpg',
				 array( 'host1.*' ),
				 true,
			 ),
			 array(
				 'https://host1.com/path/img.jpg',
				 array( '*.host1.*' ),
				 false,
			 ),
			 array(
				 'https://www.host1.com/path/img.jpg',
				 array( '*.host1.com' ),
				 true,
			 ),
			 array(
				 'https://www.host1.com/path/img.jpg',
				 array( 'www.host1.*' ),
				 true,
			 ),
			 array(
				 'https://www.host1.com/path/img.jpg',
				 array( 'www.host2.*' ),
				 true,
			 ),
		 );
	}

	/**
	 * Creates a tmp dummy local image file.
	 *
	 * @param string $local_file Local file path.
	 *
	 * @throws RuntimeException In case test file could not be created.
	 */
	private function create_tmp_empty_local_file( $local_file ) {
		// Create subdirectory.
		@mkdir( dirname( $local_file ), 0777, true );

		// Create empty file.
		$created = file_put_contents( $local_file, '' );
		if ( false === $created ) {
			throw new RuntimeException( sprintf( '%s could not create local test file %s.', __CLASS__, $local_file ) );
		}
	}
}
